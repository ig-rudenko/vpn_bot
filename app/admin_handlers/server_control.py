import os

import psutil
from aiogram import types, Router, F
from ..decorators.user_status import superuser_required

from app.models import User
from app.handlers.welcome import get_welcome_keyboard
from app.service.utils import format_bytes

router = Router()


def get_icon(percent):
    if percent < 20:
        return "üü¢"
    elif percent < 50:
        return "üü°"
    elif percent < 70:
        return "üü†"
    else:
        return "üî¥"


def get_memory() -> str:
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä—É–∑–∫–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏"""
    try:
        mem = psutil.virtual_memory()
    except RuntimeError:
        return ""
    else:
        mem_total = mem.total  # –û–±—â–∏–π –æ–±—ä–µ–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –≤ –±–∞–π—Ç–∞—Ö
        mem_used = mem.used  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –≤ –±–∞–π—Ç–∞—Ö
        mem_percent = mem.percent  # –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏

        return (
            f"{get_icon(mem_percent)} RAM: {mem_percent}%"
            f" ({format_bytes(mem_used)} –∏–∑ {format_bytes(mem_total)} –±–∞–π—Ç)"
        )


def get_swap() -> str:
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ swap"""
    try:
        swap = psutil.swap_memory()
    except RuntimeError:
        return ""
    else:
        swap_total = swap.total  # –û–±—â–∏–π –æ–±—ä–µ–º swap –≤ –±–∞–π—Ç–∞—Ö
        swap_used = swap.used  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–º swap –≤ –±–∞–π—Ç–∞—Ö
        swap_percent = swap.percent  # –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è swap
        return (
            f"{get_icon(swap_percent)} SWAP: {swap_percent}% "
            f"({format_bytes(swap_used)} –∏–∑ {format_bytes(swap_total)} –±–∞–π—Ç)"
        )


def get_disk_usage() -> str:
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –Ω–∞ –¥–∏—Å–∫–µ"""
    try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Å–∫
        disk = psutil.disk_usage(os.path.abspath(os.sep))
    except RuntimeError:
        return ""
    else:
        disk_total = disk.total  # –û–±—â–∏–π –æ–±—ä–µ–º –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≤ –±–∞–π—Ç–∞—Ö
        disk_used = disk.used  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–º –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≤ –±–∞–π—Ç–∞—Ö
        disk_percent = disk.percent  # –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        return (
            f"{get_icon(disk_percent)} DISK: {disk_percent}% "
            f"({format_bytes(disk_used)} –∏–∑ {format_bytes(disk_total)} –±–∞–π—Ç)"
        )


@router.callback_query(F.data == "server")
@superuser_required
async def server_control(callback: types.CallbackQuery):
    user = await User.get(tg_id=callback.from_user.id)

    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞
    cpu_percent = psutil.cpu_percent(interval=1)
    status = (
        f"{get_swap()}\n{get_memory()}\n{get_disk_usage()}\n"
        f"{get_icon(cpu_percent)} CPU: {cpu_percent}%"
    )

    await callback.message.edit_text(
        status, reply_markup=await get_welcome_keyboard(user)
    )
    await callback.answer()
