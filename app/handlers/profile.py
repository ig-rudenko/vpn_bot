from typing import Sequence

from aiogram import Router, types
from aiogram import F
from aiogram.filters.callback_data import CallbackData
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.service.shortcuts import answer_connection_config
from app.service.utils import format_bytes
from app.xray.generator import xray_connection_maker
from app.xray.service import xray_service
from app.models import VPNConnection, User


router = Router()


class GetConnectionCallbackFactory(CallbackData, prefix="vpn_connection"):
    conn_id: int


def get_to_profile_keyboard():
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile")]
        ]
    )


def get_connections_text_and_buttons_builder(
    connections: Sequence[VPNConnection],
) -> tuple[str, InlineKeyboardBuilder]:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–æ–≤ VPNConnection –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂,
    —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∏ –æ–±—ä–µ–∫—Ç InlineKeyboardBuilder.

    :param connections: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–æ–≤ VPNConnection
    :return: –∫–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: —Å—Ç—Ä–æ–∫—É –∏ –æ–±—ä–µ–∫—Ç InlineKeyboardBuilder.
    """
    builder = InlineKeyboardBuilder()
    text = ""
    for i, conn in enumerate(connections, 1):
        text += f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è @{conn.username}\n"
        if conn.is_active:
            text += f"‚ùáÔ∏è–î–æ—Å—Ç—É–ø–Ω–æ –¥–æ: {conn.available_to.strftime('%d %B %Y %H:%M')}\n"
            builder.row(
                types.InlineKeyboardButton(
                    text=f"üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ {i}",
                    callback_data=GetConnectionCallbackFactory(conn_id=conn.id).pack(),
                )
            )
        else:
            text += "‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!\n"
        text += "\n"

    return text, builder


@router.callback_query(F.data == "profile")
async def profile(callback: types.CallbackQuery):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –µ–µ –≤–º–µ—Å—Ç–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ VPN-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.
    """
    user = await User.get_or_create(callback.from_user)

    user_traffic = await xray_service.get_user_traffic(user.username)

    text = (
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª—å!\n"
        f"–í–∞—à —Å—Ç–∞—Ç—É—Å {' üü¢ –∞–∫—Ç–∏–≤–µ–Ω' if user.is_active else ' üî¥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
        f"–í–∞—à username: @{user.username}\n"
        f"–ü—Ä–æ—Ñ–∏–ª—å –±—ã–ª —Å–æ–∑–¥–∞–Ω: {user.date_joined.strftime('%d %B %Y %H:%M')}\n\n"
        f"üîº –ó–∞–≥—Ä—É–∑–∫–∞‚Üë {format_bytes(user_traffic.uplink)}\n"
        f"üîΩ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ‚Üì {format_bytes(user_traffic.downlink)}\n"
        f"üîÑ –í—Å–µ–≥–æ: {format_bytes(user_traffic.uplink+user_traffic.downlink)}\n\n"
    )

    connection = await VPNConnection.filter(tg_id=user.tg_id)

    go_back_button = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="start")

    if not connection:
        await callback.message.edit_text(
            text + "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[go_back_button]]),
        )
    else:
        conn_text, keyboard_builder = get_connections_text_and_buttons_builder(
            connection
        )
        keyboard_builder.row(go_back_button)
        await callback.message.edit_text(
            text + conn_text, reply_markup=keyboard_builder.as_markup()
        )

    await callback.answer()


@router.callback_query(GetConnectionCallbackFactory.filter())
async def get_config(
    callback: types.CallbackQuery,
    callback_data: GetConnectionCallbackFactory,
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–¥–µ–Ω–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """

    user = await User.get_or_create(callback.from_user)
    try:
        conn: VPNConnection = await VPNConnection.get(
            id=callback_data.conn_id, tg_id=user.tg_id
        )
    except VPNConnection.DoesNotExists:
        await callback.message.edit_text(
            "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!", reply_markup=get_to_profile_keyboard()
        )
    else:
        conn_str = xray_connection_maker.get_connection_string(conn.uuid, conn.username)
        await answer_connection_config(callback, conn_str)

    await callback.answer()
