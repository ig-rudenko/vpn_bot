from datetime import datetime, timedelta

from aiogram import Router, types
from aiogram import F
from aiogram.utils.keyboard import InlineKeyboardBuilder

from ..service.shortcuts import answer_connection_config
from ..service.vpn import VPNConnectionService
from ..models import User
from .welcome import get_welcome_keyboard

router = Router()


async def check_trial(user: User, callback: types.CallbackQuery) -> bool:
    """
    ะคัะฝะบัะธั ยซcheck_trialยป ะฟัะพะฒะตััะตั, ะตััั ะปะธ ั ะฟะพะปัะทะพะฒะฐัะตะปั ะพััะฐะฒัะธะตัั ะฟัะพะฑะฝัะต ะฟะพะดะบะปััะตะฝะธั,
    ะธ ะฒะพะทะฒัะฐัะฐะตั ยซTrueยป, ะตัะปะธ ะพะฝะธ ะตััั, ะฒ ะฟัะพัะธะฒะฝะพะผ ัะปััะฐะต ะพะฝะฐ ะพัะพะฑัะฐะถะฐะตั ัะพะพะฑัะตะฝะธะต
    ะฒ ัะตะปะตะณัะฐะผ ะธ ะฒะพะทะฒัะฐัะฐะตั ยซFalseยป.
    """
    if user.trial_count < 1:
        keyboard = await get_welcome_keyboard(user)
        await callback.message.edit_text(
            "ะฃ ะฒะฐั ะทะฐะบะพะฝัะธะปะธัั ะฟัะพะฑะฝัะต ะฟะพะดะบะปััะตะฝะธั", reply_markup=keyboard
        )
        await callback.answer()
        return False
    return True


@router.callback_query(F.data == "tariff_selection")
async def tariff_selection(callback: types.CallbackQuery):
    """
    ะัะพะฑัะฐะถะฐะตั ะผะตะฝั ั ะพะฟัะธัะผะธ ะฒัะฑะพัะฐ ัะฐัะธัะฐ ะธ ะพัะฟัะฐะฒะปัะตั ะตะณะพ ะฟะพะปัะทะพะฒะฐัะตะปั ะฒ ะฒะธะดะต ัะพะพะฑัะตะฝะธั.
    """
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="ะะพะปััะธัั ะฝะฐัััะพะนะบะธ",
            # callback_data="tariff_selection:trial:info",
            callback_data="tariff_selection:trial:get",
        ),
        types.InlineKeyboardButton(
            text="๐ ะัะพัะธะปั",
            callback_data="profile",
        ),
        # types.InlineKeyboardButton(
            # text="ะะปะฐัะฝะฐั ะฒะตััะธั",
            # callback_data="tariff_selection:paid:info",
        # ),
    )
    builder.row(types.InlineKeyboardButton(text="๐ ะะฐะทะฐะด", callback_data="start"))
    await callback.message.edit_text(
        #"ะัะฑะตัะธัะต ัะฐัะธั ะดะปั ะฟะพะดะบะปััะตะฝะธั",
        "ะะฐะถะผะฐะฒ \"๐ ะะพะปััะธัั ะฝะฐัััะพะนะบะธ\" ะั ะฟะพะปััะธัะต QR-code ะธ ัััะปะบั, ะบะพัะพัะฐั ะะฐะผ ะฝะตะพะฑัะพะดะธะผะฐ ะดะปั ะฝะฐัััะพะนะบะธ ะฟัะธะปะพะถะตะฝะธั ะฝะฐ ะะฐัะตะผ ััััะพะนััะฒะต \n ะะปั ะฟัะพัะผะพััะฐ\ะฟะพะปััะตะฝะธั ัััะตััะฒัััะธั ะฝะฐัััะพะตะบ ัะผะพััะธัะต \n ัะฐะทะดะตะป \"๐ ะัะพัะธะปั\"",
        reply_markup=builder.as_markup(),
    )
    await callback.answer()


# ======================= ะัะพะฑะฝะพะต ะฟะพะดะบะปััะตะฝะธะต =====================


@router.callback_query(F.data == "tariff_selection:trial:info")
async def tariff_selection_trial_info(callback: types.CallbackQuery):
    """
    ะคัะฝะบัะธั ยซtariff_selection_trial_infoยป ะพัะพะฑัะฐะถะฐะตั ะฟะพะปัะทะพะฒะฐัะตะปั ัะพะพะฑัะตะฝะธะต, ะธะฝัะพัะผะธััััะตะต ะตะณะพ ะพ ัะพะผ,
    ััะพ ะพะฝ ะฟะพะปััะธั 30-ะดะฝะตะฒะฝัั ะฟัะพะฑะฝัั ะฒะตััะธั VPN, ะธ ะฟัะตะดะพััะฐะฒะปัะตั ะฒะพะทะผะพะถะฝะพััั ะปะธะฑะพ ะฟะพะปััะธัั ะฟัะพะฑะฝัั ะฒะตััะธั,
    ะปะธะฑะพ ะฒะตัะฝััััั ะฒ ะฟัะตะดัะดััะตะต ะผะตะฝั.
    """
    user = await User.get_or_create(callback.from_user)

    if not await check_trial(user, callback):
        return

    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="ะะพะปััะธัั",
            callback_data="tariff_selection:trial:get",
        ),
        types.InlineKeyboardButton(
            text="ะะฐะทะฐะด",
            callback_data="tariff_selection",
        ),
    )
    await callback.message.edit_text(
        "ะะฐะผ ะฑัะดะตั ะฟัะตะดะพััะฐะฒะปะตะฝะฐ ะฟัะพะฑะฝะฐั ะฒะตััะธั VPN ะฒ ัะตัะตะฝะธะต 30 ะดะฝะตะน",
        reply_markup=builder.as_markup(),
    )
    await callback.answer()


@router.callback_query(F.data == "tariff_selection:trial:get")
async def tariff_selection_trial_get(callback: types.CallbackQuery):
    """
    ะัะพะฒะตััะตั, ะธะผะตะตั ะปะธ ะฟะพะปัะทะพะฒะฐัะตะปั ะฟัะฐะฒะพ ะฝะฐ ะฟัะพะฑะฝัั ะฒะตััะธั, ัะพะทะดะฐะตั ะฝะพะฒะพะต
    VPN-ัะพะตะดะธะฝะตะฝะธะต ะธ ะพะฑะฝะพะฒะปัะตั ััะตััะธะบ ะฟัะพะฑะฝัั ะฒะตััะธะน ะฟะพะปัะทะพะฒะฐัะตะปั.
    """
    user = await User.get_or_create(callback.from_user)

    if not await check_trial(user, callback):
        return

    available_to = datetime.now() + timedelta(days=30)
    connection_str = await VPNConnectionService.create_new_connection(
        tg_id=user.tg_id,
        username=callback.from_user.username or str(callback.from_user.id),
        available_to=available_to,
    )
    await user.update(trial_count=user.trial_count - 1)
    await answer_connection_config(callback, connection_str)
    await callback.answer()


# ======================= ะะะะขะะซะ ============================


@router.callback_query(F.data == "tariff_selection:paid:info")
async def tariff_selection_paid_info(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="ะะฐะทะฐะด",
            callback_data="tariff_selection",
        ),
    )
    await callback.message.edit_text(
        "ะ ะดะฐะฝะฝัะน ะผะพะผะตะฝั ะดะพัััะฟะฝั ัะพะปัะบะพ ะฟัะพะฑะฝัะต ะฒะตััะธะธ",
        reply_markup=builder.as_markup(),
    )
    await callback.answer()
